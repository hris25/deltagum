// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  basePrice   Decimal  @db.Decimal(10, 2) // Prix de base pour 1 unité
  image       String
  active      Boolean  @default(true)
  dosage      String?  // Ex: "30mg", "75mg"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variants    ProductVariant[]
  orderItems  OrderItem[]
  priceTiers  PriceTier[] // Nouveaux prix par quantité

  @@map("products")
}

model ProductVariant {
  id        String     @id @default(cuid())
  productId String
  flavor    FlavorType
  color     String
  image     String     @default("/img/placeholder.svg")
  stock     Int        @default(0)
  sku       String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  product    Product     @relation(fields: [productId], references: [id])
  orderItems OrderItem[]

  @@map("product_variants")
}

model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders  Order[]
  loyalty LoyaltyProgram?
  
  @@map("customers")
}

model Order {
  id              String      @id @default(cuid())
  customerId      String
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  stripePaymentId String?
  shippingAddress Json
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  customer Customer    @relation(fields: [customerId], references: [id])
  items    OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  variantId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  
  order   Order          @relation(fields: [orderId], references: [id])
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])
  
  @@map("order_items")
}

model LoyaltyProgram {
  id         String       @id @default(cuid())
  customerId String       @unique
  points     Int          @default(0)
  level      LoyaltyLevel @default(BRONZE)
  
  customer Customer @relation(fields: [customerId], references: [id])
  
  @@map("loyalty_programs")
}

enum FlavorType {
  STRAWBERRY
  BLUEBERRY
  APPLE
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum LoyaltyLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model PriceTier {
  id        String  @id @default(cuid())
  productId String
  quantity  Int     // Quantité (1, 3, 6, 10, etc.)
  price     Decimal @db.Decimal(10, 2) // Prix pour cette quantité
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, quantity])
  @@map("price_tiers")
}
